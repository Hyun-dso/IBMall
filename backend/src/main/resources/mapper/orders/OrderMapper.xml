<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itbank.mall.mapper.orders.OrderMapper">

  <!-- =========================
       (A) 기존 ResultMap/쿼리
       ========================= -->
  <!-- 주문 상세 조회용 resultMap -->
  <resultMap id="orderItemMap" type="com.itbank.mall.dto.orders.OrderItemDto">
    <result property="productName" column="product_name" />
    <result property="quantity"    column="quantity" />
    <result property="price"       column="price" />
  </resultMap>

  <!-- 주문 전체 조회용 resultMap -->
  <resultMap id="orderMap" type="com.itbank.mall.dto.orders.OrderDto">
    <id     property="orderId"    column="order_id" />
    <result property="totalPrice" column="total_price" />
    <result property="status"     column="status" />
    <result property="buyerName"  column="buyer_name" />
    <result property="createdAt"  column="created_at" />
    <collection property="orderItems"
                ofType="com.itbank.mall.dto.orders.OrderItemDto"
                resultMap="orderItemMap" />
  </resultMap>

  <!-- 주문 + 주문 상세 + 상품 JOIN 쿼리 -->
  <select id="findOrdersByMemberId" resultMap="orderMap">
    SELECT
      o.order_id,
      o.total_price,
      o.status,
      o.buyer_name,
      o.created_at,
      oi.quantity,
      oi.price,
      p.name AS product_name
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN product p      ON oi.product_id = p.product_id
    WHERE o.member_id = #{memberId}
    ORDER BY o.created_at DESC
  </select>

  <insert id="insertOrder"
          parameterType="com.itbank.mall.entity.orders.OrderEntity"
          useGeneratedKeys="true" keyProperty="orderId">
    INSERT INTO orders (
      member_id,
      total_price,
      buyer_name,
      buyer_phone,
      order_type,
      status,
      order_uid
    ) VALUES (
      #{memberId},
      #{totalPrice},
      #{buyerName},
      #{buyerPhone},
      #{orderType},
      #{status},
      #{orderUid}
    )
  </insert>

  <insert id="insertOrderItem"
          parameterType="com.itbank.mall.entity.orders.OrderItemEntity">
    INSERT INTO order_items (
      order_id,
      product_id,
      product_option_id,
      quantity,
      price
    ) VALUES (
      #{orderId},
      #{productId},
      #{productOptionId},
      #{quantity},
      #{price}
    )
  </insert>

	<!-- (E) 메일 본문용 라인아이템 매핑 -->
	<resultMap id="OrderEmailLineMap"
		type="com.itbank.mall.dto.orders.OrderEmailLineDto">
		<result property="productName" column="product_name" />
		<result property="optionValue" column="option_value" />
		<result property="quantity" column="quantity" />
		<result property="lineTotal" column="line_total" />
	</resultMap>

	<select id="findOrderEmailLinesByOrderUid" resultMap="OrderEmailLineMap">
		SELECT
		p.name AS product_name,
		po.option_value AS option_value, -- 옵션 없으면 NULL
		oi.quantity AS quantity,
		(oi.quantity * oi.price) AS line_total
		FROM orders o
		JOIN order_items oi ON oi.order_id = o.order_id
		JOIN product p ON p.product_id = oi.product_id
		LEFT JOIN product_option po ON po.id = oi.product_option_id
		WHERE o.order_uid = #{orderUid}
		ORDER BY oi.order_item_id ASC
	</select>

	<!-- ==========================================
       (B) 비회원 주문 조회용 ResultMap/공통 컬럼
       ========================================== -->

	<!-- 공통 컬럼 묶음 -->
  <sql id="OrderBaseCols">
    o.order_id    AS order_id,
    o.order_uid   AS order_uid,
    o.created_at  AS created_at,
    o.status      AS status,
    o.total_price AS total_price,
    o.buyer_name  AS buyer_name,
    o.buyer_phone AS buyer_phone
  </sql>

	<!-- Row(VO) 매핑: 목록 요약 -->
  <resultMap id="OrderSummaryMap" type="com.itbank.mall.mapper.row.OrderSummaryRow">
    <id     property="orderId"     column="order_id"/>
    <result property="orderUid"    column="order_uid"/>
    <result property="createdAt"   column="created_at"/>
    <result property="status"      column="status"/>
    <result property="totalPrice"  column="total_price"/>
    <result property="buyerName"   column="buyer_name"/>
    <result property="buyerPhone"  column="buyer_phone"/>
    <result property="itemSummary" column="item_summary"/>
    <result property="hasDelivery" column="has_delivery"/>
  </resultMap>

	<!-- Row(VO) 매핑: 상세 헤더 -->
  <resultMap id="OrderDetailMap" type="com.itbank.mall.mapper.row.OrderDetailRow">
    <id     property="orderId"    column="order_id"/>
    <result property="orderUid"   column="order_uid"/>
    <result property="createdAt"  column="created_at"/>
    <result property="status"     column="status"/>
    <result property="totalPrice" column="total_price"/>
    <result property="buyerName"  column="buyer_name"/>
    <result property="buyerPhone" column="buyer_phone"/>
  </resultMap>

	<!-- Row(VO) 매핑: 상세 아이템들 (주의: unitPrice <- price) -->
  <resultMap id="OrderItemRowMap" type="com.itbank.mall.mapper.row.OrderItemRow">
    <result property="orderId"         column="order_id"/>
    <result property="productId"       column="product_id"/>
    <result property="productOptionId" column="product_option_id"/>
    <result property="productName"     column="product_name"/>
    <result property="optionName"      column="option_name"/>
    <result property="quantity"        column="quantity"/>
    <result property="unitPrice"       column="price"/>
  </resultMap>

	<!-- ==========================================
       (C) 비회원 주문 조회용 쿼리
       ========================================== -->

	<!-- COUNT: 이름+전화+기간 -->
  <select id="countGuestOrdersByNamePhone" resultType="long">
    SELECT COUNT(*)
    FROM orders o
    WHERE o.member_id IS NULL
      AND o.buyer_name  = #{name}
      AND o.buyer_phone = #{phone}
      AND o.created_at <![CDATA[ >= ]]> #{from}
      AND o.created_at <![CDATA[ < ]]> DATE_ADD(#{to}, INTERVAL 1 DAY)
  </select>

	<!-- LIST: 이름+전화+기간 (페이징) -->
  <select id="selectGuestOrdersByNamePhone" resultMap="OrderSummaryMap">
SELECT
  <include refid="OrderBaseCols"/>,
  CONCAT(
    COALESCE(p_first.name, ''),
    CASE WHEN s.cnt > 1 THEN CONCAT(' 외 ', s.cnt - 1, '개') ELSE '' END
  ) AS item_summary,
  EXISTS (SELECT 1 FROM deliveries d WHERE d.order_id = o.order_id) AS has_delivery
FROM orders o
LEFT JOIN (
  SELECT
    oi.order_id,
    COUNT(*)              AS cnt,
    MIN(oi.order_item_id) AS first_item_id   -- 실제 PK 컬럼명으로 교체
  FROM order_items oi
  GROUP BY oi.order_id
) s ON s.order_id = o.order_id
LEFT JOIN order_items oi_first
  ON oi_first.order_item_id = s.first_item_id -- 실제 PK 컬럼명으로 교체
LEFT JOIN product p_first
  ON p_first.product_id = oi_first.product_id
WHERE o.member_id IS NULL
  AND o.buyer_name  = #{name}
  AND o.buyer_phone = #{phone}
  AND o.created_at <![CDATA[ >= ]]> #{from}
  AND o.created_at <![CDATA[ < ]]>  DATE_ADD(#{to}, INTERVAL 1 DAY)
ORDER BY o.created_at DESC
LIMIT #{size} OFFSET #{offset}

  </select>

	<!-- DETAIL: 소유 검증 + 주문 기본 정보 -->
  <select id="selectGuestOrderDetail" resultMap="OrderDetailMap">
    SELECT
      <include refid="OrderBaseCols"/>
    FROM orders o
    WHERE o.order_uid   = #{orderUid}
      AND o.buyer_name  = #{name}
      AND REPLACE(o.buyer_phone, '-', '') = #{phone}
    LIMIT 1
  </select>

	<!-- ITEMS: 주문 아이템 목록 (상세용) -->
  <select id="selectOrderItems" resultMap="OrderItemRowMap">
    SELECT
      oi.order_id,
      oi.product_id,
      oi.product_option_id,
      p.name  AS product_name,
      po.name AS option_name,
      oi.quantity,
      oi.price
    FROM order_items oi
    JOIN product p              ON p.product_id = oi.product_id
    LEFT JOIN product_option po ON po.id = oi.product_option_id
    WHERE oi.order_id = #{orderId}
    ORDER BY oi.id ASC
  </select>

	<!-- ==========================================
       (D) 회원 전용 주문 조회 쿼리
       ========================================== -->

	<!-- COUNT: memberId + 기간(+옵션 status) -->
  <select id="countOrdersByMemberId" resultType="long">
    SELECT COUNT(*)
    FROM orders o
    WHERE o.member_id = #{memberId}
      AND o.created_at <![CDATA[ >= ]]> #{from}
      AND o.created_at <![CDATA[ < ]]> DATE_ADD(#{to}, INTERVAL 1 DAY)
    <if test="status != null">
      AND o.status = #{status}
    </if>
  </select>

	<!-- LIST: memberId + 기간(+옵션 status) (페이징) -->
  <select id="selectOrdersByMemberId" resultMap="OrderSummaryMap">
    SELECT
      <include refid="OrderBaseCols"/>,
      /* 요약: "첫상품명 외 N개" */
      CONCAT(
        COALESCE((
          SELECT p1.name
          FROM order_items oi1
          JOIN product p1 ON p1.product_id = oi1.product_id
          WHERE oi1.order_id = o.order_id
          ORDER BY oi1.id ASC
          LIMIT 1
        ), ''),
        CASE
          WHEN (SELECT COUNT(*) FROM order_items oi2 WHERE oi2.order_id = o.order_id) > 1
          THEN CONCAT(' 외 ', (
            (SELECT COUNT(*) FROM order_items oi3 WHERE oi3.order_id = o.order_id) - 1
          ), '개')
          ELSE ''
        END
      ) AS item_summary,
      /* 배송 존재 여부 */
      EXISTS (SELECT 1 FROM deliveries d WHERE d.order_id = o.order_id) AS has_delivery
    FROM orders o
    WHERE o.member_id = #{memberId}
      AND o.created_at <![CDATA[ >= ]]> #{from}
      AND o.created_at <![CDATA[ < ]]> DATE_ADD(#{to}, INTERVAL 1 DAY)
    <if test="status != null">
      AND o.status = #{status}
    </if>
    ORDER BY o.created_at DESC
    LIMIT #{size} OFFSET #{offset}
  </select>

	<!-- DETAIL: memberId + orderUid (소유 검증) -->
  <select id="selectMemberOrderDetail" resultMap="OrderDetailMap">
    SELECT
      <include refid="OrderBaseCols"/>
    FROM orders o
    WHERE o.member_id = #{memberId}
      AND o.order_uid = #{orderUid}
    LIMIT 1
  </select>

</mapper>
