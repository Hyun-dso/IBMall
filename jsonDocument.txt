{
  "name": "회원가입",
  "method": "POST",
  "endpoint": "/api/members/signup",
  "headers": {
    "Content-Type": "application/json"
  },
  "request": {
    "email": "user@example.com",
    "password": "password123",
    "confirmPassword": "password123",
    "name": "홍길동",
    "nickname": "gildong",
    "phone": "010-1234-5678",
    "address": "서울특별시 어딘가"
  },
  "response": {
    "message": "회원가입 성공! 이메일 인증 링크를 확인하세요."
  },
  "statusCode": 200,
  "errorResponses": [
    {
      "statusCode": 400,
      "message": "비밀번호가 일치하지 않습니다"
    },
    {
      "statusCode": 400,
      "message": "이미 존재하는 이메일입니다"
    },
    {
      "statusCode": 400,
      "message": "이미 사용 중인 닉네임입니다."
    },
    {
      "statusCode": 500,
      "message": "서버 오류가 발생했습니다."
    }
  ],
  "description": "회원가입을 수행합니다. 이메일, 비밀번호, 닉네임은 필수이며, 전화번호와 주소는 선택입니다.",
  "notes": "닉네임/이메일 중복 여부는 서버에서 검사하며, 비밀번호 일치 여부도 서버에서 최종 확인합니다."
}

{
  "name": "내 정보 조회",
  "method": "GET",
  "endpoint": "/api/members/me",
  "headers": {
    "Authorization": "Bearer {JWT_TOKEN}"
  },
  "request": null,
  "response": {
    "id": 1,
    "email": "user@example.com",
    "name": "홍길동",
    "nickname": "gildong",
    "phone": "010-1234-5678",
    "address": "서울특별시 어딘가",
    "provider": "local",
    "verified": false,
    "grade": "BASIC",
    "createdAt": "2025-07-16T15:34:00"
  },
  "statusCode": 200,
  "errorResponses": [
    {
      "statusCode": 401,
      "message": "로그인이 필요합니다."
    }
  ],
  "description": "JWT 인증 정보를 바탕으로 현재 로그인한 유저의 정보를 반환합니다.",
  "notes": "프론트엔드는 Authorization 헤더에 토큰이 없을 경우 요청하지 않도록 제한해야 합니다."
}

[
  {
    "name": "로그인",
    "method": "POST",
    "endpoint": "/api/auth/signin",
    "headers": {
      "Content-Type": "application/json"
    },
    "request": {
      "email": "user@example.com",
      "password": "password123"
    },
    "response": {
      "message": "로그인 성공",
      "token": "eyJhbGciOiJIUzI1NiIsInR..."
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 401,
        "message": "이메일 또는 비밀번호가 틀렸습니다"
      },
      {
        "statusCode": 500,
        "message": "서버 오류가 발생했습니다."
      }
    ],
    "description": "이메일/비밀번호를 확인하고, 성공 시 JWT 토큰을 발급합니다.",
    "notes": "프론트는 이 토큰을 Authorization 헤더에 넣어 다른 API 호출 시 사용해야 합니다."
  },
  {
    "name": "로그아웃",
    "method": "POST",
    "endpoint": "/api/auth/logout",
    "headers": {},
    "request": null,
    "response": {
      "message": "로그아웃 완료 (프론트에서 토큰 삭제 필요)"
    },
    "statusCode": 200,
    "errorResponses": [],
    "description": "서버 단에서 별도 처리는 하지 않으며, 클라이언트가 토큰을 삭제해야 로그아웃됩니다.",
    "notes": "JWT 방식은 stateless이므로 서버에서 토큰 무효화는 따로 하지 않습니다."
  }
]

[
  {
    "name": "이메일 인증 코드 발송",
    "method": "POST",
    "endpoint": "/api/email/code/send",
    "headers": {
      "Content-Type": "application/json"
    },
    "request": {
      "email": "user@example.com"
    },
    "response": {
      "message": "이메일 인증코드 전송 완료"
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 400,
        "message": "잘못된 이메일 형식입니다"
      },
      {
        "statusCode": 500,
        "message": "이메일 전송 실패"
      }
    ],
    "description": "입력된 이메일로 인증 코드를 발송합니다.",
    "notes": "유효한 이메일 형식이어야 하며, 동일한 이메일로 중복 요청이 제한될 수 있습니다."
  },
  {
    "name": "이메일 인증 코드 검증",
    "method": "POST",
    "endpoint": "/api/email/code/verify",
    "headers": {
      "Content-Type": "application/json"
    },
    "request": {
      "email": "user@example.com",
      "code": "123456"
    },
    "response": {
      "message": "이메일 인증 성공"
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 400,
        "message": "인증 실패 또는 만료된 코드입니다"
      },
      {
        "statusCode": 500,
        "message": "서버 오류가 발생했습니다."
      }
    ],
    "description": "이메일과 인증 코드를 입력받아 유효성을 확인합니다.",
    "notes": "만료되었거나 잘못된 인증 코드는 실패 처리됩니다."
  }
]

[
  {
    "name": "비밀번호 재설정 링크 발송",
    "method": "POST",
    "endpoint": "/api/password/reset-link",
    "headers": {
      "Content-Type": "application/json"
    },
    "request": {
      "email": "user@example.com"
    },
    "response": {
      "message": "비밀번호 재설정 링크가 이메일로 전송되었습니다."
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 400,
        "message": "존재하지 않는 이메일입니다"
      },
      {
        "statusCode": 500,
        "message": "링크 전송 중 오류가 발생했습니다."
      }
    ],
    "description": "해당 이메일로 비밀번호 재설정 링크를 전송합니다.",
    "notes": "회원 가입된 이메일이어야 하며, 링크에는 토큰이 포함되어야 합니다."
  },
  {
    "name": "비밀번호 재설정",
    "method": "POST",
    "endpoint": "/api/password/reset",
    "headers": {
      "Content-Type": "application/json"
    },
    "request": {
      "token": "abcdef123456",
      "newPassword": "new-password123"
    },
    "response": {
      "message": "비밀번호가 성공적으로 변경되었습니다"
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 400,
        "message": "토큰이 유효하지 않거나 만료되었습니다"
      },
      {
        "statusCode": 500,
        "message": "비밀번호 변경 중 오류가 발생했습니다."
      }
    ],
    "description": "비밀번호 재설정 토큰을 사용하여 새 비밀번호로 변경합니다.",
    "notes": "토큰은 일정 시간 이후 만료되며, 한 번만 사용할 수 있습니다."
  }
]

[
  {
    "name": "Google 로그인 URL 생성",
    "method": "GET",
    "endpoint": "/api/oauth2/authorize/google",
    "headers": {},
    "request": null,
    "response": {
      "url": "https://accounts.google.com/o/oauth2/v2/auth?...client_id=..."
    },
    "statusCode": 200,
    "errorResponses": [],
    "description": "Google 로그인용 OAuth2 인증 URL을 생성합니다.",
    "notes": "프론트는 이 URL로 리다이렉트하여 사용자로부터 동의를 받습니다."
  },
  {
    "name": "Google 로그인 콜백 처리",
    "method": "GET",
    "endpoint": "/api/oauth2/callback/google",
    "headers": {},
    "request": {
      "code": "구글에서 반환된 인가 코드"
    },
    "response": {
      "signupRequired": true,
      "tempUser": {
        "email": "user@example.com",
        "name": "홍길동",
        "providerId": "104281388393922838393"
      }
    },
    "statusCode": 200,
    "errorResponses": [
      {
        "statusCode": 400,
        "message": "토큰 발급 실패"
      },
      {
        "statusCode": 400,
        "message": "사용자 정보 수신 실패"
      },
      {
        "statusCode": 500,
        "message": "Google OAuth 처리 중 오류가 발생했습니다."
      }
    ],
    "description": "구글에서 받은 code로 access token을 요청하고 사용자 정보를 조회합니다.",
    "notes": "회원 존재 여부에 따라 signupRequired가 true/false로 분기됩니다."
  }
]

{
  "name": "회원 프로필 조회",
  "method": "GET",
  "endpoint": "/api/mypage/profile",
  "headers": {
    "Authorization": "Bearer {JWT_TOKEN}"
  },
  "request": null,
  "response": {
    "id": 1,
    "email": "user@example.com",
    "name": "홍길동",
    "nickname": "dragon",
    "phone": "01012345678",
    "address": "서울시 강남구",
    "provider": "local",
    "verified": true,
    "grade": "BASIC",
    "createdAt": "2025-07-01T12:34:56"
  },
  "statusCode": 200,
  "errorResponse": {
    "statusCode": 401,
    "message": "로그인 필요"
  },
  "description": "JWT 기반으로 로그인된 사용자의 프로필 정보를 반환합니다.",
  "notes": "유효한 JWT 토큰이 필요합니다. anonymousUser 또는 인증 실패 시 401 반환."
}

{
  "name": "회원 프로필 수정",
  "method": "PATCH",
  "endpoint": "/api/mypage/profile",
  "headers": {
    "Authorization": "Bearer {JWT_TOKEN}",
    "Content-Type": "application/json"
  },
  "request": {
    "name": "홍길순",
    "nickname": "phoenix",
    "phone": "01098765432",
    "address": "부산광역시 해운대구"
  },
  "response": {
    "message": "회원 정보 수정 완료"
  },
  "statusCode": 200,
  "errorResponse": [
    {
      "statusCode": 400,
      "message": "존재하지 않는 회원입니다"
    },
    {
      "statusCode": 500,
      "message": "서버 오류가 발생했습니다"
    }
  ],
  "description": "회원 이름, 닉네임, 전화번호, 주소 등을 수정할 수 있습니다.",
  "notes": "닉네임이 중복되었을 경우 서비스 단에서 validation 필요"
}
