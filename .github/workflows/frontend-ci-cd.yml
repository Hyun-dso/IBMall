name: Frontend CI/CD (prod)

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - "deploy/frontend/**"
      - ".github/workflows/frontend-ci-cd.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install deps (frontend)
        working-directory: frontend
        run: NPM_CONFIG_PRODUCTION=false npm ci

      - name: Build (frontend)
        working-directory: frontend
        run: NODE_ENV=production npm run dev

      # GHCR 이미지 경로는 소문자만 허용
      - name: Set image tags
        id: tags
        run: |
          OWNER="${{ secrets.GHCR_USER }}"
          OWNER_LC="$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=ghcr.io/${OWNER_LC}/ibmall-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "IMAGE_MAIN=ghcr.io/${OWNER_LC}/ibmall-frontend:main" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Docker image
        run: |
          docker build \
              --build-arg NEXT_PUBLIC_PORTONE_V2_STORE_ID='${{ vars.NEXT_PUBLIC_PORTONE_V2_STORE_ID }}' \
              --build-arg NEXT_PUBLIC_PORTONE_V2_CHANNEL_KEY='${{ vars.NEXT_PUBLIC_PORTONE_V2_CHANNEL_KEY }}' \
              -f frontend/Dockerfile -t "${{ steps.tags.outputs.IMAGE }}" frontend
            docker tag "${{ steps.tags.outputs.IMAGE }}" "${{ steps.tags.outputs.IMAGE_MAIN }}"
            docker push "${{ steps.tags.outputs.IMAGE }}"
            docker push "${{ steps.tags.outputs.IMAGE_MAIN }}"

      - name: Ship frontend deploy scripts via Bastion
        run: |
          echo "${{ secrets.BASTION_KEY }}" > bastion.pem
          chmod 600 bastion.pem

          SSH_BASTION="${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }}"
          SSH_WEB="${{ secrets.APP_USER }}@${{ secrets.WEB_HOST }}"   # ← 프라이빗 IP

          # 두 번째 홉용 키를 배스천에 임시 복사
          scp -o StrictHostKeyChecking=no -i bastion.pem bastion.pem $SSH_BASTION:/tmp/app.pem
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION "chmod 600 /tmp/app.pem"

          # (1) 레포 → 배스천
          scp -o StrictHostKeyChecking=no -i bastion.pem ./deploy/frontend/deploy.sh   $SSH_BASTION:/tmp/deploy_front.sh
          scp -o StrictHostKeyChecking=no -i bastion.pem ./deploy/frontend/rollback.sh $SSH_BASTION:/tmp/rollback_front.sh

          # (2) 배스천 → 웹 EC2
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/app.pem /tmp/deploy_front.sh   $SSH_WEB:/tmp/deploy_front.sh && \
             scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/app.pem /tmp/rollback_front.sh $SSH_WEB:/tmp/rollback_front.sh"

          # (3) 웹 EC2에 배치
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/app.pem $SSH_WEB \
             'mkdir -p /home/ubuntu/deploy/frontend && \
              sudo mv /tmp/deploy_front.sh   /home/ubuntu/deploy/frontend/deploy.sh && \
              sudo mv /tmp/rollback_front.sh /home/ubuntu/deploy/frontend/rollback.sh && \
              sudo chmod +x /home/ubuntu/deploy/frontend/*.sh'"

          # (선택) 배스천 임시 키 삭제
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION 'shred -u /tmp/app.pem' || true

      - name: Deploy (blue/green port switch via Bastion)
        env:
          IMAGE: ${{ steps.tags.outputs.IMAGE }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT:  ${{ secrets.GHCR_PAT }}
        run: |
          echo "${{ secrets.BASTION_KEY }}" > bastion.pem
          chmod 600 bastion.pem

          SSH_BASTION="${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }}"
          SSH_WEB="${{ secrets.APP_USER }}@${{ secrets.WEB_HOST }}"   # ← 프라이빗 IP

          # 두 번째 홉용 키를 배스천에 임시 복사
          scp -o StrictHostKeyChecking=no -i bastion.pem bastion.pem $SSH_BASTION:/tmp/app.pem
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION "chmod 600 /tmp/app.pem"

          # 프론트 배포 실행 (헬스체크 경로는 /api/health)
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/app.pem $SSH_WEB \
             'echo \"$GHCR_PAT\" | sudo docker login ghcr.io -u \"$GHCR_USER\" --password-stdin && \
              HEALTH_PATH=/api/health sudo /home/ubuntu/deploy/frontend/deploy.sh \"$IMAGE\"'"

          # (선택) 배스천 임시 키 삭제
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION 'shred -u /tmp/app.pem' || true
