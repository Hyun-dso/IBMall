name: Frontend CI/CD (prod)

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci-cd.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install deps (frontend)
        working-directory: frontend
        run: NPM_CONFIG_PRODUCTION=false npm ci

      - name: Build (frontend)
        working-directory: frontend
        run: NODE_ENV=production npm run build -- --no-lint

      # GHCR 이미지 경로는 소문자만 허용
      - name: Set image tags
        id: tags
        run: |
          OWNER="${{ secrets.GHCR_USER }}"
          OWNER_LC="$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=ghcr.io/${OWNER_LC}/ibmall-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "IMAGE_MAIN=ghcr.io/${OWNER_LC}/ibmall-frontend:main" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Docker image
        run: |
          docker build -f frontend/Dockerfile -t "${{ steps.tags.outputs.IMAGE }}" frontend
          docker tag "${{ steps.tags.outputs.IMAGE }}" "${{ steps.tags.outputs.IMAGE_MAIN }}"
          docker push "${{ steps.tags.outputs.IMAGE }}"
          docker push "${{ steps.tags.outputs.IMAGE_MAIN }}"

      - name: Ship deploy & rollback scripts to web-ec2 via Bastion
        run: |
          echo "${{ secrets.BASTION_KEY }}" > bastion.pem
          chmod 600 bastion.pem
          SSH_BASTION="${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }}"
          SSH_WEB="${{ secrets.APP_USER }}@${{ secrets.APP1_HOST }}"

          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "ssh -o StrictHostKeyChecking=no $SSH_WEB 'mkdir -p /home/ubuntu/deploy'"

          scp -o StrictHostKeyChecking=no -i bastion.pem deploy/deploy.sh $SSH_BASTION:/tmp/deploy.sh
          scp -o StrictHostKeyChecking=no -i bastion.pem deploy/rollback.sh $SSH_BASTION:/tmp/rollback.sh
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION "scp -o StrictHostKeyChecking=no /tmp/deploy.sh $SSH_WEB:/tmp/deploy.sh"
          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION "scp -o StrictHostKeyChecking=no /tmp/rollback.sh $SSH_WEB:/tmp/rollback.sh"

          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "ssh -o StrictHostKeyChecking=no $SSH_WEB 'sudo mv /tmp/deploy.sh /home/ubuntu/deploy/deploy.sh && sudo mv /tmp/rollback.sh /home/ubuntu/deploy/rollback.sh && sudo chmod +x /home/ubuntu/deploy/*.sh'"

      - name: Deploy (blue/green port switch via Bastion)
        env:
          IMAGE: ${{ steps.tags.outputs.IMAGE }}
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT:  ${{ secrets.GHCR_PAT }}
        run: |
          echo "${{ secrets.BASTION_KEY }}" > bastion.pem
          chmod 600 bastion.pem
          SSH_BASTION="${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }}"
          SSH_WEB="${{ secrets.APP_USER }}@${{ secrets.APP1_HOST }}"

          ssh -o StrictHostKeyChecking=no -i bastion.pem $SSH_BASTION \
            "ssh -o StrictHostKeyChecking=no $SSH_WEB \
             'echo \"$GHCR_PAT\" | sudo docker login ghcr.io -u \"$GHCR_USER\" --password-stdin && \
               sudo /home/ubuntu/deploy/deploy.sh \"$IMAGE\"'"
